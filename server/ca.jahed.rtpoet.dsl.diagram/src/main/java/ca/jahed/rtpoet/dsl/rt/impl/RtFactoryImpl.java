/**
 * generated by Xtext 2.25.0
 */
package ca.jahed.rtpoet.dsl.rt.impl;

import ca.jahed.rtpoet.dsl.rt.Artifact;
import ca.jahed.rtpoet.dsl.rt.Attribute;
import ca.jahed.rtpoet.dsl.rt.Capsule;
import ca.jahed.rtpoet.dsl.rt.ChoicePoint;
import ca.jahed.rtpoet.dsl.rt.ClassCppProps;
import ca.jahed.rtpoet.dsl.rt.CompositeState;
import ca.jahed.rtpoet.dsl.rt.CompositeStateBody;
import ca.jahed.rtpoet.dsl.rt.Connector;
import ca.jahed.rtpoet.dsl.rt.DeepHistory;
import ca.jahed.rtpoet.dsl.rt.EntryPoint;
import ca.jahed.rtpoet.dsl.rt.Enumeration;
import ca.jahed.rtpoet.dsl.rt.ExitPoint;
import ca.jahed.rtpoet.dsl.rt.Import;
import ca.jahed.rtpoet.dsl.rt.InitialPoint;
import ca.jahed.rtpoet.dsl.rt.JunctionPoint;
import ca.jahed.rtpoet.dsl.rt.Literal;
import ca.jahed.rtpoet.dsl.rt.LiteralBoolean;
import ca.jahed.rtpoet.dsl.rt.LiteralInteger;
import ca.jahed.rtpoet.dsl.rt.LiteralReal;
import ca.jahed.rtpoet.dsl.rt.LiteralString;
import ca.jahed.rtpoet.dsl.rt.LiteralUnlimitedNatural;
import ca.jahed.rtpoet.dsl.rt.Model;
import ca.jahed.rtpoet.dsl.rt.Operation;
import ca.jahed.rtpoet.dsl.rt.Parameter;
import ca.jahed.rtpoet.dsl.rt.Part;
import ca.jahed.rtpoet.dsl.rt.Port;
import ca.jahed.rtpoet.dsl.rt.PrimitiveType;
import ca.jahed.rtpoet.dsl.rt.Protocol;
import ca.jahed.rtpoet.dsl.rt.PseudoState;
import ca.jahed.rtpoet.dsl.rt.Return;
import ca.jahed.rtpoet.dsl.rt.RtFactory;
import ca.jahed.rtpoet.dsl.rt.RtPackage;
import ca.jahed.rtpoet.dsl.rt.Signal;
import ca.jahed.rtpoet.dsl.rt.SimpleState;
import ca.jahed.rtpoet.dsl.rt.State;
import ca.jahed.rtpoet.dsl.rt.StateCommonFragment;
import ca.jahed.rtpoet.dsl.rt.StateMachine;
import ca.jahed.rtpoet.dsl.rt.Transition;
import ca.jahed.rtpoet.dsl.rt.TransitionAction;
import ca.jahed.rtpoet.dsl.rt.TransitionGuard;
import ca.jahed.rtpoet.dsl.rt.Trigger;
import ca.jahed.rtpoet.dsl.rt.Type;
import ca.jahed.rtpoet.dsl.rt.UserType;
import ca.jahed.rtpoet.dsl.rt.Value;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class RtFactoryImpl extends EFactoryImpl implements RtFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static RtFactory init()
  {
    try
    {
      RtFactory theRtFactory = (RtFactory)EPackage.Registry.INSTANCE.getEFactory(RtPackage.eNS_URI);
      if (theRtFactory != null)
      {
        return theRtFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new RtFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RtFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case RtPackage.MODEL: return createModel();
      case RtPackage.IMPORT: return createImport();
      case RtPackage.PACKAGE: return createPackage();
      case RtPackage.CAPSULE: return createCapsule();
      case RtPackage.CLASS: return createClass();
      case RtPackage.CLASS_CPP_PROPS: return createClassCppProps();
      case RtPackage.CONNECTOR: return createConnector();
      case RtPackage.SIGNAL: return createSignal();
      case RtPackage.PROTOCOL: return createProtocol();
      case RtPackage.ENUMERATION: return createEnumeration();
      case RtPackage.ARTIFACT: return createArtifact();
      case RtPackage.PORT: return createPort();
      case RtPackage.PART: return createPart();
      case RtPackage.ATTRIBUTE: return createAttribute();
      case RtPackage.PARAMETER: return createParameter();
      case RtPackage.RETURN: return createReturn();
      case RtPackage.OPERATION: return createOperation();
      case RtPackage.VALUE: return createValue();
      case RtPackage.LITERAL: return createLiteral();
      case RtPackage.LITERAL_BOOLEAN: return createLiteralBoolean();
      case RtPackage.LITERAL_INTEGER: return createLiteralInteger();
      case RtPackage.LITERAL_REAL: return createLiteralReal();
      case RtPackage.LITERAL_STRING: return createLiteralString();
      case RtPackage.LITERAL_UNLIMITED_NATURAL: return createLiteralUnlimitedNatural();
      case RtPackage.TYPE: return createType();
      case RtPackage.PRIMITIVE_TYPE: return createPrimitiveType();
      case RtPackage.USER_TYPE: return createUserType();
      case RtPackage.STATE_MACHINE: return createStateMachine();
      case RtPackage.STATE: return createState();
      case RtPackage.STATE_COMMON_FRAGMENT: return createStateCommonFragment();
      case RtPackage.SIMPLE_STATE: return createSimpleState();
      case RtPackage.COMPOSITE_STATE_BODY: return createCompositeStateBody();
      case RtPackage.COMPOSITE_STATE: return createCompositeState();
      case RtPackage.PSEUDO_STATE: return createPseudoState();
      case RtPackage.INITIAL_POINT: return createInitialPoint();
      case RtPackage.DEEP_HISTORY: return createDeepHistory();
      case RtPackage.CHOICE_POINT: return createChoicePoint();
      case RtPackage.JUNCTION_POINT: return createJunctionPoint();
      case RtPackage.ENTRY_POINT: return createEntryPoint();
      case RtPackage.EXIT_POINT: return createExitPoint();
      case RtPackage.TRANSITION: return createTransition();
      case RtPackage.TRIGGER: return createTrigger();
      case RtPackage.TRANSITION_GUARD: return createTransitionGuard();
      case RtPackage.TRANSITION_ACTION: return createTransitionAction();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ca.jahed.rtpoet.dsl.rt.impl.ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Import createImport()
  {
    ca.jahed.rtpoet.dsl.rt.impl.ImportImpl import_ = new ImportImpl();
    return import_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ca.jahed.rtpoet.dsl.rt.Package createPackage()
  {
    ca.jahed.rtpoet.dsl.rt.impl.PackageImpl package_ = new PackageImpl();
    return package_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Capsule createCapsule()
  {
    ca.jahed.rtpoet.dsl.rt.impl.CapsuleImpl capsule = new CapsuleImpl();
    return capsule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ca.jahed.rtpoet.dsl.rt.Class createClass()
  {
    ca.jahed.rtpoet.dsl.rt.impl.ClassImpl class_ = new ClassImpl();
    return class_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ClassCppProps createClassCppProps()
  {
    ClassCppPropsImpl classCppProps = new ClassCppPropsImpl();
    return classCppProps;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Connector createConnector()
  {
    ca.jahed.rtpoet.dsl.rt.impl.ConnectorImpl connector = new ConnectorImpl();
    return connector;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Signal createSignal()
  {
    ca.jahed.rtpoet.dsl.rt.impl.SignalImpl signal = new SignalImpl();
    return signal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Protocol createProtocol()
  {
    ca.jahed.rtpoet.dsl.rt.impl.ProtocolImpl protocol = new ProtocolImpl();
    return protocol;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Enumeration createEnumeration()
  {
    EnumerationImpl enumeration = new EnumerationImpl();
    return enumeration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Artifact createArtifact()
  {
    ca.jahed.rtpoet.dsl.rt.impl.ArtifactImpl artifact = new ArtifactImpl();
    return artifact;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Port createPort()
  {
    ca.jahed.rtpoet.dsl.rt.impl.PortImpl port = new PortImpl();
    return port;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Part createPart()
  {
    ca.jahed.rtpoet.dsl.rt.impl.PartImpl part = new PartImpl();
    return part;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Attribute createAttribute()
  {
    ca.jahed.rtpoet.dsl.rt.impl.AttributeImpl attribute = new AttributeImpl();
    return attribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Parameter createParameter()
  {
    ca.jahed.rtpoet.dsl.rt.impl.ParameterImpl parameter = new ParameterImpl();
    return parameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Return createReturn()
  {
    ca.jahed.rtpoet.dsl.rt.impl.ReturnImpl return_ = new ReturnImpl();
    return return_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Operation createOperation()
  {
    ca.jahed.rtpoet.dsl.rt.impl.OperationImpl operation = new OperationImpl();
    return operation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Value createValue()
  {
    ca.jahed.rtpoet.dsl.rt.impl.ValueImpl value = new ValueImpl();
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Literal createLiteral()
  {
    ca.jahed.rtpoet.dsl.rt.impl.LiteralImpl literal = new LiteralImpl();
    return literal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LiteralBoolean createLiteralBoolean()
  {
    LiteralBooleanImpl literalBoolean = new LiteralBooleanImpl();
    return literalBoolean;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LiteralInteger createLiteralInteger()
  {
    LiteralIntegerImpl literalInteger = new LiteralIntegerImpl();
    return literalInteger;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LiteralReal createLiteralReal()
  {
    LiteralRealImpl literalReal = new LiteralRealImpl();
    return literalReal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LiteralString createLiteralString()
  {
    LiteralStringImpl literalString = new LiteralStringImpl();
    return literalString;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LiteralUnlimitedNatural createLiteralUnlimitedNatural()
  {
    LiteralUnlimitedNaturalImpl literalUnlimitedNatural = new LiteralUnlimitedNaturalImpl();
    return literalUnlimitedNatural;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Type createType()
  {
    ca.jahed.rtpoet.dsl.rt.impl.TypeImpl type = new TypeImpl();
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PrimitiveType createPrimitiveType()
  {
    PrimitiveTypeImpl primitiveType = new PrimitiveTypeImpl();
    return primitiveType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UserType createUserType()
  {
    ca.jahed.rtpoet.dsl.rt.impl.UserTypeImpl userType = new UserTypeImpl();
    return userType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StateMachine createStateMachine()
  {
    StateMachineImpl stateMachine = new StateMachineImpl();
    return stateMachine;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public State createState()
  {
    ca.jahed.rtpoet.dsl.rt.impl.StateImpl state = new StateImpl();
    return state;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StateCommonFragment createStateCommonFragment()
  {
    StateCommonFragmentImpl stateCommonFragment = new StateCommonFragmentImpl();
    return stateCommonFragment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SimpleState createSimpleState()
  {
    SimpleStateImpl simpleState = new SimpleStateImpl();
    return simpleState;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CompositeStateBody createCompositeStateBody()
  {
    CompositeStateBodyImpl compositeStateBody = new CompositeStateBodyImpl();
    return compositeStateBody;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CompositeState createCompositeState()
  {
    CompositeStateImpl compositeState = new CompositeStateImpl();
    return compositeState;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PseudoState createPseudoState()
  {
    PseudoStateImpl pseudoState = new PseudoStateImpl();
    return pseudoState;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InitialPoint createInitialPoint()
  {
    InitialPointImpl initialPoint = new InitialPointImpl();
    return initialPoint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DeepHistory createDeepHistory()
  {
    DeepHistoryImpl deepHistory = new DeepHistoryImpl();
    return deepHistory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ChoicePoint createChoicePoint()
  {
    ChoicePointImpl choicePoint = new ChoicePointImpl();
    return choicePoint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JunctionPoint createJunctionPoint()
  {
    JunctionPointImpl junctionPoint = new JunctionPointImpl();
    return junctionPoint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EntryPoint createEntryPoint()
  {
    EntryPointImpl entryPoint = new EntryPointImpl();
    return entryPoint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExitPoint createExitPoint()
  {
    ca.jahed.rtpoet.dsl.rt.impl.ExitPointImpl exitPoint = new ExitPointImpl();
    return exitPoint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Transition createTransition()
  {
    TransitionImpl transition = new TransitionImpl();
    return transition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Trigger createTrigger()
  {
    ca.jahed.rtpoet.dsl.rt.impl.TriggerImpl trigger = new TriggerImpl();
    return trigger;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TransitionGuard createTransitionGuard()
  {
    TransitionGuardImpl transitionGuard = new TransitionGuardImpl();
    return transitionGuard;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TransitionAction createTransitionAction()
  {
    TransitionActionImpl transitionAction = new TransitionActionImpl();
    return transitionAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RtPackage getRtPackage()
  {
    return (RtPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static RtPackage getPackage()
  {
    return RtPackage.eINSTANCE;
  }

} //RtFactoryImpl
