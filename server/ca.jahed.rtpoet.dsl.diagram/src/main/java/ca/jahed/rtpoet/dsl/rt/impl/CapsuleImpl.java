/**
 * generated by Xtext 2.25.0
 */
package ca.jahed.rtpoet.dsl.rt.impl;

import ca.jahed.rtpoet.dsl.rt.Attribute;
import ca.jahed.rtpoet.dsl.rt.Capsule;
import ca.jahed.rtpoet.dsl.rt.ClassCppProps;
import ca.jahed.rtpoet.dsl.rt.Connector;
import ca.jahed.rtpoet.dsl.rt.Operation;
import ca.jahed.rtpoet.dsl.rt.Part;
import ca.jahed.rtpoet.dsl.rt.Port;
import ca.jahed.rtpoet.dsl.rt.RtPackage;
import ca.jahed.rtpoet.dsl.rt.StateMachine;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Capsule</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ca.jahed.rtpoet.dsl.rt.impl.CapsuleImpl#isTop <em>Top</em>}</li>
 *   <li>{@link ca.jahed.rtpoet.dsl.rt.impl.CapsuleImpl#getName <em>Name</em>}</li>
 *   <li>{@link ca.jahed.rtpoet.dsl.rt.impl.CapsuleImpl#getCppProps <em>Cpp Props</em>}</li>
 *   <li>{@link ca.jahed.rtpoet.dsl.rt.impl.CapsuleImpl#getAttributes <em>Attributes</em>}</li>
 *   <li>{@link ca.jahed.rtpoet.dsl.rt.impl.CapsuleImpl#getOperations <em>Operations</em>}</li>
 *   <li>{@link ca.jahed.rtpoet.dsl.rt.impl.CapsuleImpl#getParts <em>Parts</em>}</li>
 *   <li>{@link ca.jahed.rtpoet.dsl.rt.impl.CapsuleImpl#getPorts <em>Ports</em>}</li>
 *   <li>{@link ca.jahed.rtpoet.dsl.rt.impl.CapsuleImpl#getConnectors <em>Connectors</em>}</li>
 *   <li>{@link ca.jahed.rtpoet.dsl.rt.impl.CapsuleImpl#getStateMachine <em>State Machine</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CapsuleImpl extends MinimalEObjectImpl.Container implements Capsule
{
  /**
   * The default value of the '{@link #isTop() <em>Top</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isTop()
   * @generated
   * @ordered
   */
  protected static final boolean TOP_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isTop() <em>Top</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isTop()
   * @generated
   * @ordered
   */
  protected boolean top = TOP_EDEFAULT;

  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getCppProps() <em>Cpp Props</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCppProps()
   * @generated
   * @ordered
   */
  protected ClassCppProps cppProps;

  /**
   * The cached value of the '{@link #getAttributes() <em>Attributes</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAttributes()
   * @generated
   * @ordered
   */
  protected EList<Attribute> attributes;

  /**
   * The cached value of the '{@link #getOperations() <em>Operations</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperations()
   * @generated
   * @ordered
   */
  protected EList<Operation> operations;

  /**
   * The cached value of the '{@link #getParts() <em>Parts</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParts()
   * @generated
   * @ordered
   */
  protected EList<Part> parts;

  /**
   * The cached value of the '{@link #getPorts() <em>Ports</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPorts()
   * @generated
   * @ordered
   */
  protected EList<Port> ports;

  /**
   * The cached value of the '{@link #getConnectors() <em>Connectors</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConnectors()
   * @generated
   * @ordered
   */
  protected EList<Connector> connectors;

  /**
   * The cached value of the '{@link #getStateMachine() <em>State Machine</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStateMachine()
   * @generated
   * @ordered
   */
  protected StateMachine stateMachine;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CapsuleImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RtPackage.Literals.CAPSULE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isTop()
  {
    return top;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTop(boolean newTop)
  {
    boolean oldTop = top;
    top = newTop;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RtPackage.CAPSULE__TOP, oldTop, top));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RtPackage.CAPSULE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ClassCppProps getCppProps()
  {
    return cppProps;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCppProps(ClassCppProps newCppProps, NotificationChain msgs)
  {
    ClassCppProps oldCppProps = cppProps;
    cppProps = newCppProps;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RtPackage.CAPSULE__CPP_PROPS, oldCppProps, newCppProps);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCppProps(ClassCppProps newCppProps)
  {
    if (newCppProps != cppProps)
    {
      NotificationChain msgs = null;
      if (cppProps != null)
        msgs = ((InternalEObject)cppProps).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RtPackage.CAPSULE__CPP_PROPS, null, msgs);
      if (newCppProps != null)
        msgs = ((InternalEObject)newCppProps).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RtPackage.CAPSULE__CPP_PROPS, null, msgs);
      msgs = basicSetCppProps(newCppProps, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RtPackage.CAPSULE__CPP_PROPS, newCppProps, newCppProps));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Attribute> getAttributes()
  {
    if (attributes == null)
    {
      attributes = new EObjectContainmentEList<Attribute>(Attribute.class, this, RtPackage.CAPSULE__ATTRIBUTES);
    }
    return attributes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Operation> getOperations()
  {
    if (operations == null)
    {
      operations = new EObjectContainmentEList<Operation>(Operation.class, this, RtPackage.CAPSULE__OPERATIONS);
    }
    return operations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Part> getParts()
  {
    if (parts == null)
    {
      parts = new EObjectContainmentEList<Part>(Part.class, this, RtPackage.CAPSULE__PARTS);
    }
    return parts;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Port> getPorts()
  {
    if (ports == null)
    {
      ports = new EObjectContainmentEList<Port>(Port.class, this, RtPackage.CAPSULE__PORTS);
    }
    return ports;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Connector> getConnectors()
  {
    if (connectors == null)
    {
      connectors = new EObjectContainmentEList<Connector>(Connector.class, this, RtPackage.CAPSULE__CONNECTORS);
    }
    return connectors;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StateMachine getStateMachine()
  {
    return stateMachine;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStateMachine(StateMachine newStateMachine, NotificationChain msgs)
  {
    StateMachine oldStateMachine = stateMachine;
    stateMachine = newStateMachine;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RtPackage.CAPSULE__STATE_MACHINE, oldStateMachine, newStateMachine);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStateMachine(StateMachine newStateMachine)
  {
    if (newStateMachine != stateMachine)
    {
      NotificationChain msgs = null;
      if (stateMachine != null)
        msgs = ((InternalEObject)stateMachine).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RtPackage.CAPSULE__STATE_MACHINE, null, msgs);
      if (newStateMachine != null)
        msgs = ((InternalEObject)newStateMachine).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RtPackage.CAPSULE__STATE_MACHINE, null, msgs);
      msgs = basicSetStateMachine(newStateMachine, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RtPackage.CAPSULE__STATE_MACHINE, newStateMachine, newStateMachine));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case RtPackage.CAPSULE__CPP_PROPS:
        return basicSetCppProps(null, msgs);
      case RtPackage.CAPSULE__ATTRIBUTES:
        return ((InternalEList<?>)getAttributes()).basicRemove(otherEnd, msgs);
      case RtPackage.CAPSULE__OPERATIONS:
        return ((InternalEList<?>)getOperations()).basicRemove(otherEnd, msgs);
      case RtPackage.CAPSULE__PARTS:
        return ((InternalEList<?>)getParts()).basicRemove(otherEnd, msgs);
      case RtPackage.CAPSULE__PORTS:
        return ((InternalEList<?>)getPorts()).basicRemove(otherEnd, msgs);
      case RtPackage.CAPSULE__CONNECTORS:
        return ((InternalEList<?>)getConnectors()).basicRemove(otherEnd, msgs);
      case RtPackage.CAPSULE__STATE_MACHINE:
        return basicSetStateMachine(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RtPackage.CAPSULE__TOP:
        return isTop();
      case RtPackage.CAPSULE__NAME:
        return getName();
      case RtPackage.CAPSULE__CPP_PROPS:
        return getCppProps();
      case RtPackage.CAPSULE__ATTRIBUTES:
        return getAttributes();
      case RtPackage.CAPSULE__OPERATIONS:
        return getOperations();
      case RtPackage.CAPSULE__PARTS:
        return getParts();
      case RtPackage.CAPSULE__PORTS:
        return getPorts();
      case RtPackage.CAPSULE__CONNECTORS:
        return getConnectors();
      case RtPackage.CAPSULE__STATE_MACHINE:
        return getStateMachine();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RtPackage.CAPSULE__TOP:
        setTop((Boolean)newValue);
        return;
      case RtPackage.CAPSULE__NAME:
        setName((String)newValue);
        return;
      case RtPackage.CAPSULE__CPP_PROPS:
        setCppProps((ClassCppProps)newValue);
        return;
      case RtPackage.CAPSULE__ATTRIBUTES:
        getAttributes().clear();
        getAttributes().addAll((Collection<? extends Attribute>)newValue);
        return;
      case RtPackage.CAPSULE__OPERATIONS:
        getOperations().clear();
        getOperations().addAll((Collection<? extends Operation>)newValue);
        return;
      case RtPackage.CAPSULE__PARTS:
        getParts().clear();
        getParts().addAll((Collection<? extends Part>)newValue);
        return;
      case RtPackage.CAPSULE__PORTS:
        getPorts().clear();
        getPorts().addAll((Collection<? extends Port>)newValue);
        return;
      case RtPackage.CAPSULE__CONNECTORS:
        getConnectors().clear();
        getConnectors().addAll((Collection<? extends Connector>)newValue);
        return;
      case RtPackage.CAPSULE__STATE_MACHINE:
        setStateMachine((StateMachine)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RtPackage.CAPSULE__TOP:
        setTop(TOP_EDEFAULT);
        return;
      case RtPackage.CAPSULE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case RtPackage.CAPSULE__CPP_PROPS:
        setCppProps((ClassCppProps)null);
        return;
      case RtPackage.CAPSULE__ATTRIBUTES:
        getAttributes().clear();
        return;
      case RtPackage.CAPSULE__OPERATIONS:
        getOperations().clear();
        return;
      case RtPackage.CAPSULE__PARTS:
        getParts().clear();
        return;
      case RtPackage.CAPSULE__PORTS:
        getPorts().clear();
        return;
      case RtPackage.CAPSULE__CONNECTORS:
        getConnectors().clear();
        return;
      case RtPackage.CAPSULE__STATE_MACHINE:
        setStateMachine((StateMachine)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RtPackage.CAPSULE__TOP:
        return top != TOP_EDEFAULT;
      case RtPackage.CAPSULE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case RtPackage.CAPSULE__CPP_PROPS:
        return cppProps != null;
      case RtPackage.CAPSULE__ATTRIBUTES:
        return attributes != null && !attributes.isEmpty();
      case RtPackage.CAPSULE__OPERATIONS:
        return operations != null && !operations.isEmpty();
      case RtPackage.CAPSULE__PARTS:
        return parts != null && !parts.isEmpty();
      case RtPackage.CAPSULE__PORTS:
        return ports != null && !ports.isEmpty();
      case RtPackage.CAPSULE__CONNECTORS:
        return connectors != null && !connectors.isEmpty();
      case RtPackage.CAPSULE__STATE_MACHINE:
        return stateMachine != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (top: ");
    result.append(top);
    result.append(", name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //CapsuleImpl
